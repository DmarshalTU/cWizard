{"repository_name":"cwizard","body":"","program":{"html_id":"cwizard/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"cwizard","program":true,"enum":false,"alias":false,"const":false,"class_methods":[{"html_id":"apply_yaml_configuration-class-method","name":"apply_yaml_configuration","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":368,"url":null},"def":{"name":"apply_yaml_configuration","visibility":"Public","body":"puts(TerminalColor.colorize(\"Not implemented yet.\", TerminalColor::ORANGE))"}},{"html_id":"check_cluster_health-class-method","name":"check_cluster_health","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":288,"url":null},"def":{"name":"check_cluster_health","visibility":"Public","body":"system(\"kubectl get componentstatuses\")"}},{"html_id":"clear_screen-class-method","name":"clear_screen","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":157,"url":null},"def":{"name":"clear_screen","visibility":"Public","body":"{% if flag?(:win32) %}\n    system \"cls\"\n  {% else %}\n    system \"clear\"\n  {% end %}"}},{"html_id":"delete_kubernetes_resource-class-method","name":"delete_kubernetes_resource","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":360,"url":null},"def":{"name":"delete_kubernetes_resource","visibility":"Public","body":"puts(TerminalColor.colorize(\"Not implemented yet.\", TerminalColor::ORANGE))"}},{"html_id":"describe_pods_with_labels-class-method","name":"describe_pods_with_labels","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":298,"url":null},"def":{"name":"describe_pods_with_labels","visibility":"Public","body":"print(\"Enter label selector: \")\nlabel = gets.try(&.strip)\nsystem(\"kubectl describe pods -l #{label}\")\n"}},{"html_id":"display_banner-class-method","name":"display_banner","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":378,"url":null},"def":{"name":"display_banner","visibility":"Public","body":"puts(TerminalColor.colorize(\"====================================\", TerminalColor::CYAN))\nputs(TerminalColor.colorize(\"   Welcome to The cWizard App!\", TerminalColor::MAGENTA))\nputs(TerminalColor.colorize(\"         Version 1.0\", TerminalColor::GREEN))\nputs(TerminalColor.colorize(\"   Â© 2024 Denis Tu.\", TerminalColor::YELLOW))\nputs(TerminalColor.colorize(\"====================================\", TerminalColor::CYAN))\n"}},{"html_id":"docker_menu-class-method","name":"docker_menu","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":198,"url":null},"def":{"name":"docker_menu","visibility":"Public","body":"loop do\n  clear_screen\n  display_banner\n  puts(TerminalColor.colorize(\"Docker Operations:\", TerminalColor::CYAN))\n  puts(TerminalColor.colorize(\"1. List Docker Images\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"2. List Docker Containers\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"0. Return to Main Menu\", TerminalColor::RED))\n  print(TerminalColor.colorize(\"Enter your choice (1-2): \", TerminalColor::GREEN))\n  docker_choice = gets.try(&.to_i) || 0\n  case docker_choice\n  when 1\n    list_docker_images\n  when 2\n    list_docker_containers\n  when 0\n    break\n  else\n    puts(TerminalColor.colorize(\"Invalid choice. Please enter a number between 1 and 2.\", TerminalColor::RED))\n  end\n  puts(TerminalColor.colorize(\"\\nPress enter to continue...\", TerminalColor::GREEN))\n  gets\nend"}},{"html_id":"get_pods_with_labels-class-method","name":"get_pods_with_labels","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":292,"url":null},"def":{"name":"get_pods_with_labels","visibility":"Public","body":"print(\"Enter label selector: \")\nlabel = gets.try(&.strip)\nsystem(\"kubectl get pods -l #{label}\")\n"}},{"html_id":"kubectl_command_with_namespace(command)-class-method","name":"kubectl_command_with_namespace","abstract":false,"args":[{"name":"command","external_name":"command","restriction":""}],"args_string":"(command)","args_html":"(command)","location":{"filename":"src/cwizard.cr","line_number":304,"url":null},"def":{"name":"kubectl_command_with_namespace","args":[{"name":"command","external_name":"command","restriction":""}],"visibility":"Public","body":"print(\"Enter label selector: \")\nlabel = gets.try(&.strip)\nprint(\"Enter namespace (leave blank for all namespaces): \")\nnamespace = gets.try(&.strip)\nnamespace_option = namespace && (!namespace.empty?) ? \"-n #{namespace}\" : \"--all-namespaces\"\nsystem(\"kubectl #{command} #{label} #{namespace_option}\")\n"}},{"html_id":"kubectl_top_pod(namespace:String|Nil=nil)-class-method","name":"kubectl_top_pod","doc":"K8S","summary":"<p>K8S</p>","abstract":false,"args":[{"name":"namespace","default_value":"nil","external_name":"namespace","restriction":"String | ::Nil"}],"args_string":"(namespace : String | Nil = nil)","args_html":"(namespace : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/cwizard.cr","line_number":79,"url":null},"def":{"name":"kubectl_top_pod","args":[{"name":"namespace","default_value":"nil","external_name":"namespace","restriction":"String | ::Nil"}],"visibility":"Public","body":"if namespace && namespace.strip.empty?\n  namespace = nil\nend\ncmd = namespace ? \"kubectl top pod -n #{namespace}\" : \"kubectl top pod --all-namespaces\"\noutput = `#{cmd}`\nif $?.success?\n  output_lines = output.split(\"\\n\")\n  output_lines.shift\n  output_lines.each do |line|\n    line = line.strip\n    if line.empty?\n      next\n    end\n    columns = line.split(/\\s+/)\n    if columns.size < (namespace ? 3 : 4)\n      next\n    end\n    pod_name, cpu, memory = namespace ? [columns[0], columns[1], columns[2]] : [columns[1], columns[2], columns[3]]\n    puts(\"Namespace: #{namespace || columns[0]} \\n\\n      Pod Name: #{pod_name} \\n\\n      CPU Usage: #{cpu} \\n\\n      Memory Usage: #{memory}\")\n    puts(\"-\" * 30)\n  end\nelse\n  puts(\"Error running 'kubectl top pod' command: \\n\\n    #{output}\")\nend\n"}},{"html_id":"kubectl_watch_namespace(resource:String)-class-method","name":"kubectl_watch_namespace","abstract":false,"args":[{"name":"resource","external_name":"resource","restriction":"String"}],"args_string":"(resource : String)","args_html":"(resource : String)","location":{"filename":"src/cwizard.cr","line_number":334,"url":null},"def":{"name":"kubectl_watch_namespace","args":[{"name":"resource","external_name":"resource","restriction":"String"}],"visibility":"Public","body":"print(\"Enter namespace (leave blank for all namespaces): \")\nnamespace = gets.try(&.strip)\nnamespace_option = namespace && (!namespace.empty?) ? \"-n #{namespace}\" : \"--all-namespaces\"\nSignal::INT.trap do\n  puts(\"\\nStopped watching #{resource}.\")\nend\nsystem(\"kubectl get #{resource} #{namespace_option} --watch\")\nSignal::INT.reset\n"}},{"html_id":"kubernetes_command_with_optional_namespace(command:String,needs_label_selector:Bool=false)-class-method","name":"kubernetes_command_with_optional_namespace","abstract":false,"args":[{"name":"command","external_name":"command","restriction":"String"},{"name":"needs_label_selector","default_value":"false","external_name":"needs_label_selector","restriction":"Bool"}],"args_string":"(command : String, needs_label_selector : Bool = false)","args_html":"(command : String, needs_label_selector : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/cwizard.cr","line_number":314,"url":null},"def":{"name":"kubernetes_command_with_optional_namespace","args":[{"name":"command","external_name":"command","restriction":"String"},{"name":"needs_label_selector","default_value":"false","external_name":"needs_label_selector","restriction":"Bool"}],"visibility":"Public","body":"label_selector = \"\"\nif needs_label_selector\n  print(\"Enter label selector: \")\n  label_selector = gets.try(&.strip)\nend\nprint(\"Enter namespace (leave blank for all namespaces): \")\nnamespace = gets.try(&.strip)\nfull_command = if namespace && (!namespace.empty?)\n  \"kubectl #{command} -n #{namespace} #{label_selector}\"\nelse\n  needs_label_selector ? \"kubectl #{command} --all-namespaces\" : \"kubectl #{command}\"\nend\nsystem(full_command)\n"}},{"html_id":"kubernetes_menu-class-method","name":"kubernetes_menu","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":227,"url":null},"def":{"name":"kubernetes_menu","visibility":"Public","body":"loop do\n  clear_screen\n  display_banner\n  puts(TerminalColor.colorize(\"Kubernetes Operations:\", TerminalColor::CYAN))\n  puts(TerminalColor.colorize(\"1. Get Pods with Labels\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"2. Describe Pods with Labels\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"3. Get Services in a Namespace\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"4. Get Deployments in a Namespace\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"5. Get StatefulSets in a Namespace\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"6. Get ConfigMaps in a Namespace\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"7. Get Ingress Resources in a Namespace\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"8. Watch Events in a Namespace\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"9. View Logs of a Pod\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"10. Delete a Kubernetes Resource\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"11. Scale a Deployment\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"12. Apply a YAML Configuration\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"0. Return to Main Menu\", TerminalColor::RED))\n  print(TerminalColor.colorize(\"Enter your choice (1-12): \", TerminalColor::GREEN))\n  k8s_choice = gets.try(&.to_i) || 0\n  case k8s_choice\n  when 1\n    check_cluster_health()\n  when 2\n    kubernetes_command_with_optional_namespace(\"get pods -l\", true)\n  when 3\n    kubernetes_command_with_optional_namespace(\"describe pods -l\", true)\n  when 4\n    kubernetes_command_with_optional_namespace(\"get svc\", true)\n  when 5\n    kubectl_command_with_namespace(\"get deployments\")\n  when 6\n    kubectl_command_with_namespace(\"get statefulsets\")\n  when 7\n    kubectl_command_with_namespace(\"get configmaps\")\n  when 8\n    kubectl_command_with_namespace(\"get ingress\")\n  when 9\n    kubectl_watch_namespace(\"events\")\n  when 10\n    view_pod_logs\n  when 11\n    delete_kubernetes_resource\n  when 12\n    scale_deployment\n  when 13\n    apply_yaml_configuration\n  when 0\n    break\n  else\n    puts(TerminalColor.colorize(\"Invalid choice. Please enter a number between 1 and 13.\", TerminalColor::RED))\n  end\n  puts(TerminalColor.colorize(\"\\nPress enter to continue...\", TerminalColor::GREEN))\n  gets\nend"}},{"html_id":"list_docker_containers-class-method","name":"list_docker_containers","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":42,"url":null},"def":{"name":"list_docker_containers","visibility":"Public","body":"cmd = \"docker ps --format '{{json .}}'\"\noutput = `#{cmd}`\nif $?.success?\n  output_lines = output.split(\"\\n\")\n  output_lines.each do |line|\n    line = line.strip\n    if line.empty?\n      next\n    end\n    begin\n      container_data = JSON.parse(line)\n      status = container_data[\"Status\"]? || \"N/A\"\n      puts(\"Container ID: #{container_data[\"ID\"]} \\n\\n        Image: #{container_data[\"Image\"]} \\n\\n        Command: #{container_data[\"Command\"]} \\n\\n        Status: #{status} \\n\\n        Ports: #{container_data[\"Ports\"]}\")\n      puts(\"-\" * 30)\n    rescue exception : JSON::ParseException\n      puts(\"Error parsing JSON output: \\n\\n        #{exception.message}\")\n      puts(\"Raw Output: \\n\\n        #{line}\")\n      puts(\"-\" * 30)\n    end\n  end\nelse\n  puts(\"Error running 'docker ps' command: \\n\\n    #{output}\")\nend\n"}},{"html_id":"list_docker_images-class-method","name":"list_docker_images","doc":"Docker","summary":"<p>Docker</p>","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":6,"url":null},"def":{"name":"list_docker_images","visibility":"Public","body":"cmd = \"docker images --format '{{json .}}'\"\noutput = `#{cmd}`\nif $?.success?\n  output_lines = output.split(\"\\n\")\n  output_lines.each do |line|\n    line = line.strip\n    if line.empty?\n      next\n    end\n    begin\n      image_data = JSON.parse(line)\n      created = image_data[\"Created\"]? || \"N/A\"\n      puts(\"Repository: #{image_data[\"Repository\"]} \\n\\n        Tag: #{image_data[\"Tag\"]} \\n\\n        ID: #{image_data[\"ID\"]} \\n\\n        Created: #{created} \\n\\n        Size: #{image_data[\"Size\"]}\")\n      puts(\"-\" * 30)\n    rescue exception : JSON::ParseException\n      puts(\"Error parsing JSON output: \\n\\n        #{exception.message}\")\n      puts(\"Raw Output: \\n\\n        #{line}\")\n      puts(\"-\" * 30)\n    end\n  end\nelse\n  puts(\"Error running 'docker images' command: \\n\\n    #{output}\")\nend\n"}},{"html_id":"main_menu-class-method","name":"main_menu","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":165,"url":null},"def":{"name":"main_menu","visibility":"Public","body":"loop do\n  clear_screen\n  display_banner\n  puts(TerminalColor.colorize(\"Main Menu:\", TerminalColor::CYAN))\n  puts(TerminalColor.colorize(\"1. Docker Operations\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"2. Kubernetes Operations\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"3. Template Operations\", TerminalColor::YELLOW))\n  puts(TerminalColor.colorize(\"0. Exit\", TerminalColor::RED))\n  print(TerminalColor.colorize(\"Enter your choice (1-3): \", TerminalColor::GREEN))\n  choice = gets.try(&.to_i) || 0\n  case choice\n  when 1\n    docker_menu\n  when 2\n    kubernetes_menu\n  when 3\n    template_menu\n  when 0\n    puts(\"Exiting...\")\n    break\n  else\n    puts(TerminalColor.colorize(\"Invalid choice. Please enter a number between 1 and 3.\", TerminalColor::RED))\n  end\n  puts(TerminalColor.colorize(\"\\nPress enter to continue...\", TerminalColor::GREEN))\n  gets\nend"}},{"html_id":"scale_deployment-class-method","name":"scale_deployment","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":364,"url":null},"def":{"name":"scale_deployment","visibility":"Public","body":"puts(TerminalColor.colorize(\"Not implemented yet.\", TerminalColor::ORANGE))"}},{"html_id":"template_menu-class-method","name":"template_menu","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":374,"url":null},"def":{"name":"template_menu","visibility":"Public","body":""}},{"html_id":"view_pod_logs-class-method","name":"view_pod_logs","abstract":false,"location":{"filename":"src/cwizard.cr","line_number":351,"url":null},"def":{"name":"view_pod_logs","visibility":"Public","body":"print(\"Enter Pod name: \")\npod_name = gets.try(&.strip)\nprint(\"Enter namespace (leave blank for default): \")\nnamespace = gets.try(&.strip)\nnamespace_option = namespace && (!namespace.empty?) ? \"-n #{namespace}\" : \"\"\nsystem(\"kubectl logs #{pod_name} #{namespace_option}\")\n"}}],"types":[{"html_id":"cwizard/TerminalColor","path":"TerminalColor.html","kind":"module","full_name":"TerminalColor","name":"TerminalColor","abstract":false,"locations":[{"filename":"src/cwizard.cr","line_number":142,"url":null}],"repository_name":"cwizard","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BLUE","name":"BLUE","value":"\"\\e[34m\""},{"id":"CYAN","name":"CYAN","value":"\"\\e[36m\""},{"id":"GREEN","name":"GREEN","value":"\"\\e[32m\""},{"id":"MAGENTA","name":"MAGENTA","value":"\"\\e[35m\""},{"id":"ORANGE","name":"ORANGE","value":"\"\\e[38;5;214m\""},{"id":"RED","name":"RED","value":"\"\\e[31m\""},{"id":"RESET","name":"RESET","value":"\"\\e[0m\""},{"id":"YELLOW","name":"YELLOW","value":"\"\\e[33m\""}],"class_methods":[{"html_id":"colorize(text:String,color:String)-class-method","name":"colorize","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"color","external_name":"color","restriction":"String"}],"args_string":"(text : String, color : String)","args_html":"(text : String, color : String)","location":{"filename":"src/cwizard.cr","line_number":152,"url":null},"def":{"name":"colorize","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"color","external_name":"color","restriction":"String"}],"visibility":"Public","body":"\"#{color}#{text}#{RESET}\""}}]}]}}